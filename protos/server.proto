// Definition for services hosted on server nodes
syntax = "proto3";
import "google/protobuf/empty.proto";

package server;

message ServerIp {
    string ip = 1;
    int32 port = 2;
}

message ChangeModeRequest {
    ServerIp prevAddr = 1;
    ServerIp nextAddr = 2;
    // seq num of the last received write in NEXT node
    uint64 lastReceivedSeqNum = 3;
}

message ChangeModeReply {
    // seq num of the last received write in the current node
    uint64 lastReceivedSeqNum = 1;
}

// service listens for call from master
service MasterListener {
    rpc HeartBeat(google.protobuf.Empty) returns (google.protobuf.Empty) {}
    rpc ChangeMode(ChangeModeRequest) returns (ChangeModeReply) {}
}

message WriteRequest{
    bytes data = 1;
    uint64 offset = 2;
    uint64 clientRequestId = 3;
}

message WriteReply{
    uint64 seqNum = 1;
}

// Service hosted on head, listening for client write request
service ClientListenerHeadService {
    rpc Write(WriteRequest) returns (WriteReply){}
}

message WriteAckRequest{
    uint64 offset = 1;
    uint64 seqNum = 2;
}

// Service hosted on tail, listening for client request for receiving ack for sent writes
service ClientListenerTailService {
    rpc WriteAck(WriteAckRequest) returns (google.protobuf.Empty){}
}

// listening for calls from other node
message RelayWriteRequest {
    bytes data = 1;
    uint64 offset = 2;
    uint64 seqNum = 3;
}

message RelayWriteAckRequest {
    uint64 seqNum = 1;
}

service NodeListener {
    // relay write to the next node in the chain, return right away
    rpc RelayWrite(RelayWriteRequest) returns (google.protobuf.Empty) {}
    // ack to relayed write
    rpc RelayWriteAck(RelayWriteAckRequest) returns (google.protobuf.Empty) {}
}